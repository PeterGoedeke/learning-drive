/* tslint:disable */
/* eslint-disable */
/**
 * Learning drive
 * Learning drive application
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface CreateCategory
 */
export interface CreateCategory {
  /**
   * A category under which a post can be categorized
   * @type {string}
   * @memberof CreateCategory
   */
  category: string;
}
/**
 *
 * @export
 * @interface CreatePost
 */
export interface CreatePost {
  /**
   * The list of categories to which the post belongs
   * @type {Array<string>}
   * @memberof CreatePost
   */
  categories: Array<string>;
  /**
   * The string body of the post, as written by the user
   * @type {string}
   * @memberof CreatePost
   */
  content: string;
  /**
   * The resource attached to the post by the user. This is an optional field
   * @type {string}
   * @memberof CreatePost
   */
  resource?: string;
}
/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
  /**
   *
   * @type {Array<Post>}
   * @memberof InlineResponse200
   */
  posts: Array<Post>;
}
/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
  /**
   *
   * @type {Array<string>}
   * @memberof InlineResponse2001
   */
  categories: Array<string>;
}
/**
 * Schema which represents the JSON returned for errors and other conditions which expect status updates.
 * @export
 * @interface ModelError
 */
export interface ModelError {
  /**
   * The status message.
   * @type {string}
   * @memberof ModelError
   */
  message: string;
}
/**
 *
 * @export
 * @interface Post
 */
export interface Post {
  /**
   * The unique identifier of the post
   * @type {number}
   * @memberof Post
   */
  _id: number;
  /**
   *
   * @type {User}
   * @memberof Post
   */
  user: User;
  /**
   * The time at which the post was made, in a format suitable to be shown to the user
   * @type {string}
   * @memberof Post
   */
  timeLabelCreated: string;
  /**
   * The time at which the post was made, as milliseconds past the unix epoch
   * @type {number}
   * @memberof Post
   */
  timestampCreated: number;
  /**
   * The time at which the post was most recently edited, in a format suitable to be shown to the user
   * @type {string}
   * @memberof Post
   */
  timeLabelModified: string;
  /**
   * The time at which the post was most recently edited, as milliseconds past the unix epoch
   * @type {number}
   * @memberof Post
   */
  timestampModified: number;
  /**
   * The list of categories to which the post belongs
   * @type {Array<string>}
   * @memberof Post
   */
  categories: Array<string>;
  /**
   * The string body of the post, as written by the user
   * @type {string}
   * @memberof Post
   */
  content: string;
  /**
   * The resource attached to the post by the user. This is an optional field
   * @type {string}
   * @memberof Post
   */
  resource?: string;
  /**
   *
   * @type {PostReactions}
   * @memberof Post
   */
  reactions: PostReactions;
}
/**
 * The various types of reactions which have been made to this post. Currently, only likes are supported
 * @export
 * @interface PostReactions
 */
export interface PostReactions {
  /**
   * The number of times which people have liked a post
   * @type {number}
   * @memberof PostReactions
   */
  likes: number;
}
/**
 *
 * @export
 * @interface ReactToPost
 */
export interface ReactToPost {
  /**
   * Whether the user does or does not like the post
   * @type {boolean}
   * @memberof ReactToPost
   */
  liked: boolean;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   * The unique identifier of the user
   * @type {number}
   * @memberof User
   */
  _id?: number;
  /**
   * The url of the profile picture of the user
   * @type {string}
   * @memberof User
   */
  imageUrl: string;
  /**
   * The real-life name of the user
   * @type {string}
   * @memberof User
   */
  name: string;
  /**
   * The unique handle of the user used to directly add other users, generated by the backend
   * @type {string}
   * @memberof User
   */
  handle: string;
}
/**
 *
 * @export
 * @interface UserFullProfile
 */
export interface UserFullProfile {
  /**
   *
   * @type {User}
   * @memberof UserFullProfile
   */
  user: User;
  /**
   * The list of all the users who follow the user in question
   * @type {Array<User>}
   * @memberof UserFullProfile
   */
  followers: Array<User>;
  /**
   * The number of users who follow the user in question
   * @type {number}
   * @memberof UserFullProfile
   */
  followerCount: number;
  /**
   * The list of all the users followed by the user in question
   * @type {Array<User>}
   * @memberof UserFullProfile
   */
  followed: Array<User>;
  /**
   * The number of users followed by the user in question
   * @type {number}
   * @memberof UserFullProfile
   */
  followedCount: number;
}

/**
 * CategoriesApi - axios parameter creator
 * @export
 */
export const CategoriesApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get a list of all possible categories a post can be categorized under
     * @summary Get categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/categories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication CognitoAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a category
     * @summary Create a category
     * @param {CreateCategory} createCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesPost: async (
      createCategory: CreateCategory,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createCategory' is not null or undefined
      assertParamExists('categoriesPost', 'createCategory', createCategory);
      const localVarPath = `/categories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication CognitoAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createCategory,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CategoriesApi - functional programming interface
 * @export
 */
export const CategoriesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CategoriesApiAxiosParamCreator(configuration);
  return {
    /**
     * Get a list of all possible categories a post can be categorized under
     * @summary Get categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async categoriesGet(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesGet(options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Create a category
     * @summary Create a category
     * @param {CreateCategory} createCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async categoriesPost(
      createCategory: CreateCategory,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.categoriesPost(
        createCategory,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * CategoriesApi - factory interface
 * @export
 */
export const CategoriesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CategoriesApiFp(configuration);
  return {
    /**
     * Get a list of all possible categories a post can be categorized under
     * @summary Get categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesGet(options?: any): AxiosPromise<InlineResponse2001> {
      return localVarFp.categoriesGet(options).then((request) => request(axios, basePath));
    },
    /**
     * Create a category
     * @summary Create a category
     * @param {CreateCategory} createCategory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    categoriesPost(createCategory: CreateCategory, options?: any): AxiosPromise<void> {
      return localVarFp
        .categoriesPost(createCategory, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for categoriesPost operation in CategoriesApi.
 * @export
 * @interface CategoriesApiCategoriesPostRequest
 */
export interface CategoriesApiCategoriesPostRequest {
  /**
   *
   * @type {CreateCategory}
   * @memberof CategoriesApiCategoriesPost
   */
  readonly createCategory: CreateCategory;
}

/**
 * CategoriesApi - object-oriented interface
 * @export
 * @class CategoriesApi
 * @extends {BaseAPI}
 */
export class CategoriesApi extends BaseAPI {
  /**
   * Get a list of all possible categories a post can be categorized under
   * @summary Get categories
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoriesApi
   */
  public categoriesGet(options?: AxiosRequestConfig) {
    return CategoriesApiFp(this.configuration)
      .categoriesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a category
   * @summary Create a category
   * @param {CategoriesApiCategoriesPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoriesApi
   */
  public categoriesPost(
    requestParameters: CategoriesApiCategoriesPostRequest,
    options?: AxiosRequestConfig
  ) {
    return CategoriesApiFp(this.configuration)
      .categoriesPost(requestParameters.createCategory, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PostsApi - axios parameter creator
 * @export
 */
export const PostsApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get posts for the various feeds. Query parameters allow for search and control of pagination.
     * @summary Get posts
     * @param {number} [user] Filter the posts to only posts made by the user with a specific id. See also, &#x60;followed&#x60; parameter
     * @param {boolean} [followed] Has no effect if the &#x60;user&#x60; parameter is not also used. If the user param is used, then setting this parameter to true will search for posts by users followed by the user specified by the &#x60;user&#x60; parameter
     * @param {string} [search] Return only posts containing this substring in their content
     * @param {Array<string>} [categories] Return only posts which belong to all categories specified in this parameter. Multiple categories should be separated by commas.
     * @param {number} [offset] Used for pagination; must be used in conjunction with the &#x60;pageSize&#x60; parameter. Represents the page number the request is for, given the page size specified by the &#x60;pageSize&#x60; parameter. 0 indexed
     * @param {number} [pageSize] Used for pagination; must be used in conjunction with the &#x60;offset&#x60; parameter. Represents the number of items which should be included per page. Multiple categories should be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsGet: async (
      user?: number,
      followed?: boolean,
      search?: string,
      categories?: Array<string>,
      offset?: number,
      pageSize?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/posts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication CognitoAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (user !== undefined) {
        localVarQueryParameter['user'] = user;
      }

      if (followed !== undefined) {
        localVarQueryParameter['followed'] = followed;
      }

      if (search !== undefined) {
        localVarQueryParameter['search'] = search;
      }

      if (categories) {
        localVarQueryParameter['categories'] = categories;
      }

      if (offset !== undefined) {
        localVarQueryParameter['offset'] = offset;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter['pageSize'] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Get detailed information about a post.
     * @summary Get a post.
     * @param {string} id The id of the object in the path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('postsIdGet', 'id', id);
      const localVarPath = `/posts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication CognitoAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Add or remove your reaction to a post (currently, whether you have liked the post or not)
     * @summary React to a post.
     * @param {string} id The id of the object in the path
     * @param {ReactToPost} reactToPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsIdPatch: async (
      id: string,
      reactToPost: ReactToPost,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('postsIdPatch', 'id', id);
      // verify required parameter 'reactToPost' is not null or undefined
      assertParamExists('postsIdPatch', 'reactToPost', reactToPost);
      const localVarPath = `/posts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication CognitoAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        reactToPost,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Change the content of one of your own posts
     * @summary Edit a post.
     * @param {string} id The id of the object in the path
     * @param {CreatePost} createPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsIdPut: async (
      id: string,
      createPost: CreatePost,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('postsIdPut', 'id', id);
      // verify required parameter 'createPost' is not null or undefined
      assertParamExists('postsIdPut', 'createPost', createPost);
      const localVarPath = `/posts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication CognitoAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createPost,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Create a post
     * @summary Create a post
     * @param {CreatePost} createPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsPost: async (
      createPost: CreatePost,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'createPost' is not null or undefined
      assertParamExists('postsPost', 'createPost', createPost);
      const localVarPath = `/posts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication CognitoAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createPost,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PostsApi - functional programming interface
 * @export
 */
export const PostsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PostsApiAxiosParamCreator(configuration);
  return {
    /**
     * Get posts for the various feeds. Query parameters allow for search and control of pagination.
     * @summary Get posts
     * @param {number} [user] Filter the posts to only posts made by the user with a specific id. See also, &#x60;followed&#x60; parameter
     * @param {boolean} [followed] Has no effect if the &#x60;user&#x60; parameter is not also used. If the user param is used, then setting this parameter to true will search for posts by users followed by the user specified by the &#x60;user&#x60; parameter
     * @param {string} [search] Return only posts containing this substring in their content
     * @param {Array<string>} [categories] Return only posts which belong to all categories specified in this parameter. Multiple categories should be separated by commas.
     * @param {number} [offset] Used for pagination; must be used in conjunction with the &#x60;pageSize&#x60; parameter. Represents the page number the request is for, given the page size specified by the &#x60;pageSize&#x60; parameter. 0 indexed
     * @param {number} [pageSize] Used for pagination; must be used in conjunction with the &#x60;offset&#x60; parameter. Represents the number of items which should be included per page. Multiple categories should be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postsGet(
      user?: number,
      followed?: boolean,
      search?: string,
      categories?: Array<string>,
      offset?: number,
      pageSize?: number,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postsGet(
        user,
        followed,
        search,
        categories,
        offset,
        pageSize,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Get detailed information about a post.
     * @summary Get a post.
     * @param {string} id The id of the object in the path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postsIdGet(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postsIdGet(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Add or remove your reaction to a post (currently, whether you have liked the post or not)
     * @summary React to a post.
     * @param {string} id The id of the object in the path
     * @param {ReactToPost} reactToPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postsIdPatch(
      id: string,
      reactToPost: ReactToPost,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postsIdPatch(
        id,
        reactToPost,
        options
      );
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Change the content of one of your own posts
     * @summary Edit a post.
     * @param {string} id The id of the object in the path
     * @param {CreatePost} createPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postsIdPut(
      id: string,
      createPost: CreatePost,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postsIdPut(id, createPost, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
    /**
     * Create a post
     * @summary Create a post
     * @param {CreatePost} createPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postsPost(
      createPost: CreatePost,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postsPost(createPost, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * PostsApi - factory interface
 * @export
 */
export const PostsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PostsApiFp(configuration);
  return {
    /**
     * Get posts for the various feeds. Query parameters allow for search and control of pagination.
     * @summary Get posts
     * @param {number} [user] Filter the posts to only posts made by the user with a specific id. See also, &#x60;followed&#x60; parameter
     * @param {boolean} [followed] Has no effect if the &#x60;user&#x60; parameter is not also used. If the user param is used, then setting this parameter to true will search for posts by users followed by the user specified by the &#x60;user&#x60; parameter
     * @param {string} [search] Return only posts containing this substring in their content
     * @param {Array<string>} [categories] Return only posts which belong to all categories specified in this parameter. Multiple categories should be separated by commas.
     * @param {number} [offset] Used for pagination; must be used in conjunction with the &#x60;pageSize&#x60; parameter. Represents the page number the request is for, given the page size specified by the &#x60;pageSize&#x60; parameter. 0 indexed
     * @param {number} [pageSize] Used for pagination; must be used in conjunction with the &#x60;offset&#x60; parameter. Represents the number of items which should be included per page. Multiple categories should be separated by commas.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsGet(
      user?: number,
      followed?: boolean,
      search?: string,
      categories?: Array<string>,
      offset?: number,
      pageSize?: number,
      options?: any
    ): AxiosPromise<InlineResponse200> {
      return localVarFp
        .postsGet(user, followed, search, categories, offset, pageSize, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Get detailed information about a post.
     * @summary Get a post.
     * @param {string} id The id of the object in the path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsIdGet(id: string, options?: any): AxiosPromise<Post> {
      return localVarFp.postsIdGet(id, options).then((request) => request(axios, basePath));
    },
    /**
     * Add or remove your reaction to a post (currently, whether you have liked the post or not)
     * @summary React to a post.
     * @param {string} id The id of the object in the path
     * @param {ReactToPost} reactToPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsIdPatch(id: string, reactToPost: ReactToPost, options?: any): AxiosPromise<void> {
      return localVarFp
        .postsIdPatch(id, reactToPost, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Change the content of one of your own posts
     * @summary Edit a post.
     * @param {string} id The id of the object in the path
     * @param {CreatePost} createPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsIdPut(id: string, createPost: CreatePost, options?: any): AxiosPromise<void> {
      return localVarFp
        .postsIdPut(id, createPost, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Create a post
     * @summary Create a post
     * @param {CreatePost} createPost
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postsPost(createPost: CreatePost, options?: any): AxiosPromise<void> {
      return localVarFp.postsPost(createPost, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for postsGet operation in PostsApi.
 * @export
 * @interface PostsApiPostsGetRequest
 */
export interface PostsApiPostsGetRequest {
  /**
   * Filter the posts to only posts made by the user with a specific id. See also, &#x60;followed&#x60; parameter
   * @type {number}
   * @memberof PostsApiPostsGet
   */
  readonly user?: number;

  /**
   * Has no effect if the &#x60;user&#x60; parameter is not also used. If the user param is used, then setting this parameter to true will search for posts by users followed by the user specified by the &#x60;user&#x60; parameter
   * @type {boolean}
   * @memberof PostsApiPostsGet
   */
  readonly followed?: boolean;

  /**
   * Return only posts containing this substring in their content
   * @type {string}
   * @memberof PostsApiPostsGet
   */
  readonly search?: string;

  /**
   * Return only posts which belong to all categories specified in this parameter. Multiple categories should be separated by commas.
   * @type {Array<string>}
   * @memberof PostsApiPostsGet
   */
  readonly categories?: Array<string>;

  /**
   * Used for pagination; must be used in conjunction with the &#x60;pageSize&#x60; parameter. Represents the page number the request is for, given the page size specified by the &#x60;pageSize&#x60; parameter. 0 indexed
   * @type {number}
   * @memberof PostsApiPostsGet
   */
  readonly offset?: number;

  /**
   * Used for pagination; must be used in conjunction with the &#x60;offset&#x60; parameter. Represents the number of items which should be included per page. Multiple categories should be separated by commas.
   * @type {number}
   * @memberof PostsApiPostsGet
   */
  readonly pageSize?: number;
}

/**
 * Request parameters for postsIdGet operation in PostsApi.
 * @export
 * @interface PostsApiPostsIdGetRequest
 */
export interface PostsApiPostsIdGetRequest {
  /**
   * The id of the object in the path
   * @type {string}
   * @memberof PostsApiPostsIdGet
   */
  readonly id: string;
}

/**
 * Request parameters for postsIdPatch operation in PostsApi.
 * @export
 * @interface PostsApiPostsIdPatchRequest
 */
export interface PostsApiPostsIdPatchRequest {
  /**
   * The id of the object in the path
   * @type {string}
   * @memberof PostsApiPostsIdPatch
   */
  readonly id: string;

  /**
   *
   * @type {ReactToPost}
   * @memberof PostsApiPostsIdPatch
   */
  readonly reactToPost: ReactToPost;
}

/**
 * Request parameters for postsIdPut operation in PostsApi.
 * @export
 * @interface PostsApiPostsIdPutRequest
 */
export interface PostsApiPostsIdPutRequest {
  /**
   * The id of the object in the path
   * @type {string}
   * @memberof PostsApiPostsIdPut
   */
  readonly id: string;

  /**
   *
   * @type {CreatePost}
   * @memberof PostsApiPostsIdPut
   */
  readonly createPost: CreatePost;
}

/**
 * Request parameters for postsPost operation in PostsApi.
 * @export
 * @interface PostsApiPostsPostRequest
 */
export interface PostsApiPostsPostRequest {
  /**
   *
   * @type {CreatePost}
   * @memberof PostsApiPostsPost
   */
  readonly createPost: CreatePost;
}

/**
 * PostsApi - object-oriented interface
 * @export
 * @class PostsApi
 * @extends {BaseAPI}
 */
export class PostsApi extends BaseAPI {
  /**
   * Get posts for the various feeds. Query parameters allow for search and control of pagination.
   * @summary Get posts
   * @param {PostsApiPostsGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public postsGet(requestParameters: PostsApiPostsGetRequest = {}, options?: AxiosRequestConfig) {
    return PostsApiFp(this.configuration)
      .postsGet(
        requestParameters.user,
        requestParameters.followed,
        requestParameters.search,
        requestParameters.categories,
        requestParameters.offset,
        requestParameters.pageSize,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Get detailed information about a post.
   * @summary Get a post.
   * @param {PostsApiPostsIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public postsIdGet(requestParameters: PostsApiPostsIdGetRequest, options?: AxiosRequestConfig) {
    return PostsApiFp(this.configuration)
      .postsIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Add or remove your reaction to a post (currently, whether you have liked the post or not)
   * @summary React to a post.
   * @param {PostsApiPostsIdPatchRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public postsIdPatch(
    requestParameters: PostsApiPostsIdPatchRequest,
    options?: AxiosRequestConfig
  ) {
    return PostsApiFp(this.configuration)
      .postsIdPatch(requestParameters.id, requestParameters.reactToPost, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Change the content of one of your own posts
   * @summary Edit a post.
   * @param {PostsApiPostsIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public postsIdPut(requestParameters: PostsApiPostsIdPutRequest, options?: AxiosRequestConfig) {
    return PostsApiFp(this.configuration)
      .postsIdPut(requestParameters.id, requestParameters.createPost, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Create a post
   * @summary Create a post
   * @param {PostsApiPostsPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostsApi
   */
  public postsPost(requestParameters: PostsApiPostsPostRequest, options?: AxiosRequestConfig) {
    return PostsApiFp(this.configuration)
      .postsPost(requestParameters.createPost, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * Get detailed information about a user.
     * @summary Get a user.
     * @param {string} id The id of the object in the path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('usersIdGet', 'id', id);
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication CognitoAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
  return {
    /**
     * Get detailed information about a user.
     * @summary Get a user.
     * @param {string} id The id of the object in the path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersIdGet(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFullProfile>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
    },
  };
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UsersApiFp(configuration);
  return {
    /**
     * Get detailed information about a user.
     * @summary Get a user.
     * @param {string} id The id of the object in the path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdGet(id: string, options?: any): AxiosPromise<UserFullProfile> {
      return localVarFp.usersIdGet(id, options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * Request parameters for usersIdGet operation in UsersApi.
 * @export
 * @interface UsersApiUsersIdGetRequest
 */
export interface UsersApiUsersIdGetRequest {
  /**
   * The id of the object in the path
   * @type {string}
   * @memberof UsersApiUsersIdGet
   */
  readonly id: string;
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   * Get detailed information about a user.
   * @summary Get a user.
   * @param {UsersApiUsersIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public usersIdGet(requestParameters: UsersApiUsersIdGetRequest, options?: AxiosRequestConfig) {
    return UsersApiFp(this.configuration)
      .usersIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
