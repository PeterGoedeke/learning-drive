openapi: 3.0.0
info:
  version: "1.0"
  title: Learning drive
  description: Learning drive application
servers:
  - url: "http://localhost:5000"

security:
  - CognitoAuth: []

paths:
  "/posts":
    get:
      summary: Get posts
      description: Get posts for the various feeds. Query parameters allow for search and control of pagination.
      tags: [posts]
      x-eov-operation-id: get
      x-eov-operation-handler: posts
      parameters:
        - $ref: "#/components/parameters/UserParam"
        - $ref: "#/components/parameters/FollowedParam"
        - $ref: "#/components/parameters/SearchQueryParam"
        - $ref: "#/components/parameters/SearchCategoriesParam"
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/PageSizeParam"
      responses:
        "200":
          description: The list of posts.
          content:
            application/json:
              schema:
                type: object
                required:
                  - posts
                properties:
                  posts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Post"

    post:
      summary: Create a post
      description: Create a post
      tags: [posts]
      x-eov-operation-id: post
      x-eov-operation-handler: posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePost"
      responses:
        "201":
          description: Successfully created the post
          headers:
            Location:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/ParseError"

  "/posts/{id}":
    get:
      summary: Get a post.
      description: Get detailed information about a post.
      tags: [posts]
      x-eov-operation-id: get
      x-eov-operation-handler: posts-id
      parameters:
        - $ref: "#/components/parameters/IDParam"
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          $ref: "#/components/responses/NotFoundError"

    put:
      summary: Edit a post.
      description: Change the content of one of your own posts
      tags: [posts]
      x-eov-operation-id: put
      x-eov-operation-handler: posts-id
      parameters:
        - $ref: "#/components/parameters/IDParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePost"
      responses:
        "204":
          description: The put was applied successfully.
        "400":
          $ref: "#/components/responses/ParseError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    patch:
      operationId: reactToPost
      summary: React to a post.
      description: Add or remove your reaction to a post (currently, whether you have liked the post or not)
      tags: [posts]
      x-eov-operation-id: patch
      x-eov-operation-handler: posts-id
      parameters:
        - $ref: "#/components/parameters/IDParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReactToPost"
      responses:
        "204":
          description: The patch was applied successfully.
        "400":
          $ref: "#/components/responses/ParseError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  "/users/{id}":
    get:
      summary: Get a user.
      description: Get detailed information about a user.
      tags: [users]
      x-eov-operation-id: get
      x-eov-operation-handler: users-id
      parameters:
        - $ref: "#/components/parameters/IDParam"
      responses:
        "200":
          description: Success.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserFullProfile"
        "404":
          $ref: "#/components/responses/NotFoundError"

  "/categories":
    get:
      summary: Get categories
      description: Get a list of all possible categories a post can be categorized under
      tags: [categories]
      x-eov-operation-id: get
      x-eov-operation-handler: categories
      responses:
        "200":
          description: The list of categories.
          content:
            application/json:
              schema:
                type: object
                required:
                  - categories
                properties:
                  categories:
                    type: array
                    example:
                      ["C++", "React", "Redux", "JavaScript", "TypeScript"]
                    items:
                      $ref: "#/components/schemas/Category"

    post:
      operationId: create
      summary: Create a category
      description: Create a category
      tags: [categories]
      x-eov-operation-id: post
      x-eov-operation-handler: categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCategory"
      responses:
        "201":
          description: Successfully created the category
          headers:
            Location:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/ParseError"

components:
  securitySchemes:
    CognitoAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Post:
      type: object
      required:
        - _id
        - user
        - timeLabelCreated
        - timestampCreated
        - timeLabelModified
        - timestampModified
        - categories
        - content
        - reactions
      properties:
        _id:
          description: The unique identifier of the post
          example: 5
          type: integer
        user:
          $ref: "#/components/schemas/User"
        timeLabelCreated:
          description: The time at which the post was made, in a format suitable to be shown to the user
          example: 03/02/2022
          type: string
          format: date
        timestampCreated:
          description: The time at which the post was made, as milliseconds past the unix epoch
          example: 1646339331193
          type: integer
        timeLabelModified:
          description: The time at which the post was most recently edited, in a format suitable to be shown to the user
          example: 03/02/2022
          type: string
          format: date
        timestampModified:
          description: The time at which the post was most recently edited, as milliseconds past the unix epoch
          example: 1646339331193
          type: integer
        categories:
          description: The list of categories to which the post belongs
          type: array
          items:
            $ref: "#/components/schemas/Category"
        content:
          description: The string body of the post, as written by the user
          example: Today I learnt about the introduction of xvalues to value categories in C++
          type: string
        resource:
          description: The resource attached to the post by the user. This is an optional field
          example: https://en.cppreference.com/w/cpp/language/value_category
          type: string
          format: url
        reactions:
          description: The various types of reactions which have been made to this post. Currently, only likes are supported
          type: object
          required:
            - likes
          properties:
            likes:
              description: The number of times which people have liked a post
              example: 52
              type: integer

    CreatePost:
      type: object
      required:
        - categories
        - content
      properties:
        categories:
          description: The list of categories to which the post belongs
          type: array
          items:
            $ref: "#/components/schemas/Category"
        content:
          description: The string body of the post, as written by the user
          example: Today I learnt about the introduction of xvalues to value categories in C++
          type: string
        resource:
          description: The resource attached to the post by the user. This is an optional field
          example: https://en.cppreference.com/w/cpp/language/value_category
          type: string
          format: url

    ReactToPost:
      type: object
      required:
        - liked
      properties:
        liked:
          description: Whether the user does or does not like the post
          example: true
          type: boolean

    Category:
      description: A category under which a post can be categorized
      example: C++
      type: string

    CreateCategory:
      type: object
      required:
        - category
      properties:
        category:
          description: A category under which a post can be categorized
          example: C++
          type: string

    User:
      type: object
      required:
        - id
        - imageUrl
        - name
        - handle
      properties:
        _id:
          description: The unique identifier of the user
          example: 6
          type: integer
        imageUrl:
          description: The url of the profile picture of the user
          example: https://firebase/learning-drive/cool-image.png
          type: string
          format: url
        name:
          description: The real-life name of the user
          example: Peter Goedeke
          type: string
        handle:
          description: The unique handle of the user used to directly add other users, generated by the backend
          example: Peter#5678
          type: string

    UserFullProfile:
      type: object
      required:
        - user
        - followers
        - followerCount
        - followed
        - followedCount
      properties:
        user:
          $ref: "#/components/schemas/User"
        followers:
          description: The list of all the users who follow the user in question
          type: array
          items:
            $ref: "#/components/schemas/User"
        followerCount:
          description: The number of users who follow the user in question
          example: 2
          type: integer
        followed:
          description: The list of all the users followed by the user in question
          type: array
          items:
            $ref: "#/components/schemas/User"
        followedCount:
          description: The number of users followed by the user in question
          example: 2
          type: integer

    Error:
      description: Schema which represents the JSON returned for errors and other conditions which expect status updates.
      type: object
      required:
        - message
      properties:
        message:
          description: The status message.
          example: Invalid request.
          type: string

  responses:
    ParseError:
      description: The server failed to parse the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    UnauthorizedError:
      description: The user did not have the required privileges to access the resource.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: Unauthorized to access resource.

    NotFoundError:
      description: The requested resource was not found at the URI.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            message: Resource could not be found.

  parameters:
    IDParam:
      name: id
      in: path
      required: true
      example: "3"
      description: The id of the object in the path
      schema:
        example: "3"
        type: string
        pattern: '^[\d]*$'

    UserParam:
      name: user
      in: query
      description: Filter the posts to only posts made by the user with a specific id. See also, `followed` parameter
      example: 5
      schema:
        type: integer

    FollowedParam:
      name: followed
      in: query
      description: Has no effect if the `user` parameter is not also used.
        If the user param is used, then setting this parameter to true will search for posts by users followed by the user specified by the `user` parameter
      example: true
      schema:
        type: boolean

    SearchQueryParam:
      name: search
      in: query
      description: Return only posts containing this substring in their content
      example: today I learnt
      schema:
        type: string

    SearchCategoriesParam:
      name: categories
      in: query
      description:
        Return only posts which belong to all categories specified in this parameter.
        Multiple categories should be separated by commas.
      example: "React,Redux"
      schema:
        type: array
        items:
          type: string

    OffsetParam:
      name: offset
      in: query
      description: Used for pagination; must be used in conjunction with the `pageSize` parameter. Represents the page number the request is for, given the page size specified by the `pageSize` parameter. 0 indexed
      example: "2"
      schema:
        type: integer

    PageSizeParam:
      name: pageSize
      in: query
      description: Used for pagination; must be used in conjunction with the `offset` parameter. Represents the number of items which should be included per page. Multiple categories should be separated by commas.
      example: "10"
      schema:
        type: integer
